rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the booking/reservation
    function isOwner(data) {
      return isAuthenticated() && 
        (data.customerId == request.auth.uid || 
         data.businessId == request.auth.uid);
    }

    // Helper function to check if user is a customer
    function isCustomer(data) {
      return isAuthenticated() && data.customerId == request.auth.uid;
    }

    // Helper function to check if user is a business
    function isBusiness() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/businesses/$(request.auth.uid)).data.type == 'business';
    }

    // Helper function to check if status update is valid
    function isValidStatusUpdate(oldData, newData) {
      let validStatuses = ['pending', 'confirmed', 'cancelled'];
      return validStatuses.hasAny([newData.status]) && 
             oldData.status != newData.status;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Businesses collection rules
    match /businesses/{businessId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == businessId;
    }

    // Public collections (tours and rentals)
    match /tours/{tourId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    match /rentals/{rentalId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Conversations and messages
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated();
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, write: if isAuthenticated();
    }

    // Messages collection rules
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.bookingId in get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.customerId
      );
      allow create: if isAuthenticated() && (
        request.resource.data.senderId == request.auth.uid &&
        isBusiness()
      );
      allow update, delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
    }

    // Bookings collection rules
    match /bookings/{bookingId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow delete: if isCustomer(resource.data);
      allow update: if isCustomer(resource.data);
    }

    // Tour Reservations collection rules
    match /tourReservations/{reservationId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow delete: if isCustomer(resource.data);
      allow update: if isCustomer(resource.data);
    }

    // Vehicles collection rules
    match /vehicles/{vehicleId} {
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.businessId == request.auth.uid ||
         request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['isAvailable', 'currentBookingId']));
    }

    // Reviews collection rules
    match /reviews/{reviewId} {
      allow read: if true;
      allow write: if request.auth != null;
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Pickup Spots collection rules
    match /pickupSpots/{spotId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.businessId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.businessId == request.auth.uid;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
