rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the booking
    function isBookingOwner(bookingData) {
      return isAuthenticated() && 
        (bookingData.customerId == request.auth.uid || 
         bookingData.businessId == request.auth.uid);
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Businesses collection rules
    match /businesses/{businessId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == businessId;
    }

    // Public collections (tours and rentals)
    match /tours/{tourId} {
      allow read, write: if true;
    }
    
    match /rentals/{rentalId} {
      allow read, write: if true;
    }

    // Conversations and messages
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated();
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, write: if isAuthenticated();
    }

    // Bookings collection rules
    match /bookings/{bookingId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        (resource.data.customerId == request.auth.uid || 
         resource.data.businessId == request.auth.uid);
      allow update: if isAuthenticated() && 
        (resource.data.customerId == request.auth.uid || 
         resource.data.businessId == request.auth.uid);
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
